// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Stone.Payroll.Infrastructure.Persistence;

#nullable disable

namespace Stone.Payroll.Infrastructure.Migrations.EmployeesRead
{
    [DbContext(typeof(EmployeesReadContext))]
    partial class EmployeesReadContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Stone.Payroll.Infrastructure.ReadModels.EmployeeRead", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "DataAdmissao");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "Departamento");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "Documento");

                    b.Property<decimal>("GrossSalary")
                        .HasColumnType("decimal(18, 2)")
                        .HasAnnotation("Relational:JsonPropertyName", "SalarioBruto");

                    b.Property<bool>("HasDentalPlanDeduction")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "PossuiDescontoPlanoDental");

                    b.Property<bool>("HasHealthInsuranceDeduction")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "PossuiDescontoPlanoSaude");

                    b.Property<bool>("HasTransportationVoucherDeduction")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "PossuiDescontoValeTransporte");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "Nome");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "Sobrenome");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Stone.Payroll.Infrastructure.ReadModels.Entry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "Descricao");

                    b.Property<Guid?>("EmployeeReadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "Tipo");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18, 2)")
                        .HasAnnotation("Relational:JsonPropertyName", "Valor");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeReadId");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("Stone.Payroll.Infrastructure.ReadModels.Entry", b =>
                {
                    b.HasOne("Stone.Payroll.Infrastructure.ReadModels.EmployeeRead", null)
                        .WithMany("Entries")
                        .HasForeignKey("EmployeeReadId");
                });

            modelBuilder.Entity("Stone.Payroll.Infrastructure.ReadModels.EmployeeRead", b =>
                {
                    b.Navigation("Entries");
                });
#pragma warning restore 612, 618
        }
    }
}
